/*
Dynamicdns.pro

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynamicdnsapi

import (
	"encoding/json"
)

// checks if the UpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRequest{}

// UpdateRequest struct for UpdateRequest
type UpdateRequest struct {
	Ipv4 NullableString `json:"ipv4,omitempty"`
	Ipv6 NullableString `json:"ipv6,omitempty"`
}

// NewUpdateRequest instantiates a new UpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRequest() *UpdateRequest {
	this := UpdateRequest{}
	return &this
}

// NewUpdateRequestWithDefaults instantiates a new UpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRequestWithDefaults() *UpdateRequest {
	this := UpdateRequest{}
	return &this
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateRequest) GetIpv4() string {
	if o == nil || IsNil(o.Ipv4.Get()) {
		var ret string
		return ret
	}
	return *o.Ipv4.Get()
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateRequest) GetIpv4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv4.Get(), o.Ipv4.IsSet()
}

// HasIpv4 returns a boolean if a field has been set.
func (o *UpdateRequest) HasIpv4() bool {
	if o != nil && o.Ipv4.IsSet() {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given NullableString and assigns it to the Ipv4 field.
func (o *UpdateRequest) SetIpv4(v string) {
	o.Ipv4.Set(&v)
}
// SetIpv4Nil sets the value for Ipv4 to be an explicit nil
func (o *UpdateRequest) SetIpv4Nil() {
	o.Ipv4.Set(nil)
}

// UnsetIpv4 ensures that no value is present for Ipv4, not even an explicit nil
func (o *UpdateRequest) UnsetIpv4() {
	o.Ipv4.Unset()
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateRequest) GetIpv6() string {
	if o == nil || IsNil(o.Ipv6.Get()) {
		var ret string
		return ret
	}
	return *o.Ipv6.Get()
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateRequest) GetIpv6Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv6.Get(), o.Ipv6.IsSet()
}

// HasIpv6 returns a boolean if a field has been set.
func (o *UpdateRequest) HasIpv6() bool {
	if o != nil && o.Ipv6.IsSet() {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given NullableString and assigns it to the Ipv6 field.
func (o *UpdateRequest) SetIpv6(v string) {
	o.Ipv6.Set(&v)
}
// SetIpv6Nil sets the value for Ipv6 to be an explicit nil
func (o *UpdateRequest) SetIpv6Nil() {
	o.Ipv6.Set(nil)
}

// UnsetIpv6 ensures that no value is present for Ipv6, not even an explicit nil
func (o *UpdateRequest) UnsetIpv6() {
	o.Ipv6.Unset()
}

func (o UpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Ipv4.IsSet() {
		toSerialize["ipv4"] = o.Ipv4.Get()
	}
	if o.Ipv6.IsSet() {
		toSerialize["ipv6"] = o.Ipv6.Get()
	}
	return toSerialize, nil
}

type NullableUpdateRequest struct {
	value *UpdateRequest
	isSet bool
}

func (v NullableUpdateRequest) Get() *UpdateRequest {
	return v.value
}

func (v *NullableUpdateRequest) Set(val *UpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRequest(val *UpdateRequest) *NullableUpdateRequest {
	return &NullableUpdateRequest{value: val, isSet: true}
}

func (v NullableUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


