/*
Dynamicdns.pro

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynamicdnsapi

import (
	"encoding/json"
	"fmt"
)

// Update403Response struct for Update403Response
type Update403Response struct {
	Updateip403Response *Updateip403Response
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Update403Response) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Updateip403Response
	err = json.Unmarshal(data, &dst.Updateip403Response);
	if err == nil {
		jsonUpdateip403Response, _ := json.Marshal(dst.Updateip403Response)
		if string(jsonUpdateip403Response) == "{}" { // empty struct
			dst.Updateip403Response = nil
		} else {
			return nil // data stored in dst.Updateip403Response, return on the first match
		}
	} else {
		dst.Updateip403Response = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Update403Response)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Update403Response) MarshalJSON() ([]byte, error) {
	if src.Updateip403Response != nil {
		return json.Marshal(&src.Updateip403Response)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableUpdate403Response struct {
	value *Update403Response
	isSet bool
}

func (v NullableUpdate403Response) Get() *Update403Response {
	return v.value
}

func (v *NullableUpdate403Response) Set(val *Update403Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdate403Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdate403Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdate403Response(val *Update403Response) *NullableUpdate403Response {
	return &NullableUpdate403Response{value: val, isSet: true}
}

func (v NullableUpdate403Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdate403Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


