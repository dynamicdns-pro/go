/*
Dynamicdns.pro

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynamicdnsapi

import (
	"encoding/json"
	"fmt"
)

// Update200Response struct for Update200Response
type Update200Response struct {
	Update200ResponseAnyOf *Update200ResponseAnyOf
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Update200Response) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Update200ResponseAnyOf
	err = json.Unmarshal(data, &dst.Update200ResponseAnyOf);
	if err == nil {
		jsonUpdate200ResponseAnyOf, _ := json.Marshal(dst.Update200ResponseAnyOf)
		if string(jsonUpdate200ResponseAnyOf) == "{}" { // empty struct
			dst.Update200ResponseAnyOf = nil
		} else {
			return nil // data stored in dst.Update200ResponseAnyOf, return on the first match
		}
	} else {
		dst.Update200ResponseAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Update200Response)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Update200Response) MarshalJSON() ([]byte, error) {
	if src.Update200ResponseAnyOf != nil {
		return json.Marshal(&src.Update200ResponseAnyOf)
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableUpdate200Response struct {
	value *Update200Response
	isSet bool
}

func (v NullableUpdate200Response) Get() *Update200Response {
	return v.value
}

func (v *NullableUpdate200Response) Set(val *Update200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdate200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdate200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdate200Response(val *Update200Response) *NullableUpdate200Response {
	return &NullableUpdate200Response{value: val, isSet: true}
}

func (v NullableUpdate200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdate200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


